using Amazon.Runtime.Internal;
using MongoDB.Driver;
using SmartHomeAPI.Models;

namespace SmartHomeAPI.Services
{
    public class Users_Service //declares mongoDB interfaces - same for all services
    {
        private readonly IMongoCollection<UserModels> _users;
        private readonly IMongoCollection<HouseModels> _houses;
        private readonly IMongoCollection<RoomModels> _rooms;
        private readonly IMongoCollection<DeviceModels> _devices;
        private readonly IMongoCollection<MeasurementModels> _measurements;

        public Users_Service() //connects to DB - Same for all services
        {
            MongoClient client = new("mongodb+srv://<USERNAME>:<PASSWORD>@smarthometest.jpiqofv.mongodb.net/?retryWrites=true&w=majority");
            IMongoDatabase db = client.GetDatabase("SmartHomeDB");
            _users = db.GetCollection<UserModels>("Users");
            _houses = db.GetCollection<HouseModels>("Houses");
            _rooms = db.GetCollection<RoomModels>("Rooms");
            _devices = db.GetCollection<DeviceModels>("Devices");
            _measurements = db.GetCollection<MeasurementModels>("Measurements");
        }
        public async Task<string> SignupUser(UserModels userModels) //checks if email exists in db, if not signs up user
        {
            var existingCheck = await _users.Find(u => u.UserEmail == userModels.UserEmail).FirstOrDefaultAsync();
            if (existingCheck != null)
            {
                return null;
            }
            else
            {
                await _users.InsertOneAsync(userModels);
                var userid = await _users.Find(u => u.UserID == userModels.UserID).FirstOrDefaultAsync();
                return userid.UserID;
            }
        }
        public async Task<List<LoginReturns>> LoginUser(string uEmail, string uPassword) //login checks
        {
            var user = await _users.Find(u => u.UserEmail == uEmail).FirstOrDefaultAsync();
            if (user != null)
            {
                List<LoginReturns> returnedInfo = new List<LoginReturns>();
                if (user.UserPassword == uPassword)
                {
                    returnedInfo.Add(new LoginReturns
                    {
                        AuthedUserid = user.UserID,
                        AuthedUsername = user.UserName,
                    });
                    return returnedInfo;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }
        public async Task UpdateUser(string uid, UserModels userTBU) //updates user info
        {
            await _users.ReplaceOneAsync(u => u.UserID == uid, userTBU);
        }
        public async Task DeleteUser(string uid) //deletes user info
        {
            await _users.DeleteOneAsync(u => u.UserID == uid);
            await _houses.DeleteManyAsync(h => h.HouseOwnerID == uid);
            await _rooms.DeleteManyAsync(r => r.RoomUserID == uid);
            await _devices.DeleteManyAsync(d => d.DevOwnerID == uid);
            await _measurements.DeleteManyAsync(m => m.UserID == uid);
        }
        public async Task DEV_CLEAR_COLLECTION() //CLEARS COLLECTION DO NOT SPAM - SAME FOR ALL SERVICES
        {
            await _users.DeleteManyAsync(Builders<UserModels>.Filter.Empty);
        }
        public async Task<string> PopulateUser(string userID, int roomAmount, int deviceAmount) //automatically generates a house, number of rooms and devices for the provided userID
        {
            var checkHouse = await _houses.Find(h => h.HouseOwnerID ==  userID).FirstOrDefaultAsync();
            if (checkHouse == null)
            {
                Random roomCat = new Random();
                List<string> roomOptions = new List<string> { "Living room", "Kitchen", "Bedroom", "Bathroom", "Garage", "Storage", "Outdoor" };
                Random devCat = new Random();
                List<string> devOptions = new List<string> { "Smart Plug", "Smart Light", "Thermostat", "Air Condition", "Air Quality Monitor" };

                HouseModels house = new HouseModels();
                List<RoomModels> rooms = new List<RoomModels>();
                List<DeviceModels> devices = new List<DeviceModels>();
                house.HouseName = $"AutoGenerated_House_{userID}";
                house.HouseOwnerID = userID;
                await _houses.InsertOneAsync(house);
                var findHouse = await _houses.Find(h => h.HouseName == $"AutoGenerated_House_{userID}").FirstOrDefaultAsync();
                for (int i = 0; i < roomAmount; i++)
                {
                    int randomRoom = roomCat.Next(roomOptions.Count);
                    rooms.Add(new RoomModels
                    {
                        RoomName = $"AutoGenerated_Room_{findHouse.HouseID}_{i}",
                        RoomCategory = roomOptions[randomRoom],
                        HouseID = findHouse.HouseID,
                        RoomUserID = userID
                    });
                }

                foreach (var room in rooms)
                {
                    await _rooms.InsertOneAsync(room);
                }

                for (int i = 0; i < roomAmount; i++)
                {
                    var findRoom = await _rooms.Find(r => r.RoomName == $"AutoGenerated_Room_{findHouse.HouseID}_{i}").FirstOrDefaultAsync();

                    for (var j = 0; j < deviceAmount; j++)
                    {
                        int randomDev = devCat.Next(devOptions.Count);
                        int measID = 0;
                        if (randomDev == 2 || randomDev == 3)
                        {
                            measID = 1;
                        }
                        else if (randomDev == 0 || randomDev == 1)
                        {
                            measID = 2;
                        }
                        else
                        {
                            measID = 3;
                        }
                        devices.Add(new DeviceModels
                        {
                            DeviceName = $"AutoGenerated_Device_{findRoom.RoomID}_{j}",
                            DeviceCategory = devOptions[randomDev],
                            MeasurementID = measID,
                            Latitude = null,
                            Longitude = null,
                            RoomID = findRoom.RoomID,
                            RoomName = findRoom.RoomName,
                            HouseID = findHouse.HouseID,
                            DevOwnerID = userID,
                            Mode = null,
                            Status = false,
                            TargetTemp = 0,
                            Timer = 0,
                            StatusChangeDate = DateTime.Now
                        });
                    }
                }
                foreach (var device in devices)
                {
                    await _devices.InsertOneAsync(device);
                }
                return "OK";
            }
            else
            {
                return null;
            }
        }
            
    }
}
